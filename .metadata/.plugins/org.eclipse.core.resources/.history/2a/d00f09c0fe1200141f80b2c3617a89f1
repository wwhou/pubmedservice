package org.IEEE.utils;

import java.util.ArrayList;
import java.util.Collection;

import org.utils.Article;
import org.utils.ArticleId;
import org.utils.ArticleIdList;
import org.utils.ArticleMeta;
import org.utils.Author;
import org.utils.Book;
import org.utils.Conference;
import org.utils.Date;
import org.utils.Journal;
import org.utils.Keyword;
import org.utils.KeywordList;
import org.utils.Publisher;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class IEEESAXHandler extends DefaultHandler {

	private Collection<ArticleMeta> articleMetas = null;
	private Collection<Article> articles = null;
	private Collection<Author> authors = null;
	private ArticleMeta articleMeta = null;
	private Article article = null;
	private Author author = null;
	private String tmpValue;
	private Journal journal = null;
	private Conference conference = null;
	private Book book = null;
	private String abstractText;
	private boolean articleDateFlag = false;
	private boolean journalDateFlag = false;
	private Date articlePubDate;
	private Publisher publisher = null;
	private ArticleIdList articleIdList;
	private Date journalPubDate;
	private String pubTitle;
	private KeywordList keywordList = null;
	private Keyword keyword;
	private String authorString=null;

	public Collection<ArticleMeta> getArticleMetas() {
		return articleMetas;
	}

	public Collection<Article> getArtciles() {
		return articles;
	}

	public Collection<Author> getAuthors() {
		return authors;
	}

	@Override
	public void startElement(String uri, String localName, String qName,
			Attributes attributes) throws SAXException {
		switch (qName.toLowerCase()) {
		case "document":
			if (articleMetas == null)
				articleMetas = new ArrayList<ArticleMeta>();
			if (authors == null)
				authors = new ArrayList<Author>();
			articleMeta = new ArticleMeta();
			if (articles == null)
				articles = new ArrayList<Article>();
			article = new Article();
			articleIdList = new ArticleIdList();
			break;
		case "controlledterms":
			keywordList = new KeywordList();
			break;
		}
	}

	@Override
	public void endElement(String uri, String localName, String qName)
			throws SAXException {
		switch (qName.toLowerCase()) {
		case "documemt":
			if (conference != null) {
				conference.setTitle(pubTitle);
			}
			articleMetas.add(articleMeta);

			article.setArticleMeta(articleMeta);

			articles.add(article);
		case "title":
			articleMeta.setTitle(tmpValue);
			break;
		case "pubtitle":
			pubTitle = tmpValue;
		case "pubtype":
			String value = tmpValue.toLowerCase();
			if (value.contains("conference")) {
				conference = new Conference();
			} else if (value.contains("journal")) {
				journal = new Journal();
			} else if (value.contains("book")) {
				book = new Book();
			}
		case "doi":
			ArticleId articleId = new ArticleId();
			articleId.setIdType("DOI");
			articleId.setContent(tmpValue);
			articleIdList.getArticleId().add(articleId);
			break;
		case "publicationid":
			ArticleId pubId = new ArticleId();
			pubId.setIdType("IEEEId");
			pubId.setContent(tmpValue);
			articleIdList.getArticleId().add(pubId);
			break;
		case "isbn":
			ArticleId isbn = new ArticleId();
			isbn.setIdType("ISBN");
			isbn.setContent(tmpValue);
			articleIdList.getArticleId().add(isbn);
			break;
		case "issn":
			ArticleId issn = new ArticleId();
			issn.setIdType("ISSN");
			issn.setContent(tmpValue);
			if (journal != null) {
				journal.setIssn(tmpValue);
			}
			articleIdList.getArticleId().add(issn);
			break;
		case "abstract":
			articleMeta.setArticleAbstract(tmpValue);
			break;
		case "publisher":
			if (conference != null) {
				conference.setPublisher(tmpValue);
			} else if (book != null) {
				book.setPublisher(tmpValue);
			}
			break;
		case "volume":
			if (conference != null) {
				conference.setVolume(tmpValue);
			} else if (journal != null) {
				journal.setVolume(tmpValue);

			}
			break;
		case "term":
			if (keywordList != null) {
				Keyword keyword = new Keyword();
				keyword.setContent(tmpValue);
				keywordList.getKeyword().add(keyword);
			}
			break;
		case "thesaurusterms":
			if (keywordList != null)
				articleMeta.setKeywords(keywordList);
			break;
		case "authors":
			authorString = tmpValue;
			break;
		case "affiliations":
			if (authorString != null) {
				String[] authorNames = authorString.split(";");
				for (String authorName : authorNames) {
					Author author = new Author();
					String[] namePair = authorName.trim().split(" ");
					String name0 = namePair[0];
					if (namePair.length == 3) {
						author.setMiddleName(namePair[2]);
					}
					if (name0.contains(",")) {
						author.setLastName(name0);
						author.setFirstName(namePair[namePair.length - 1]);
					} else {
						author.setFirstName(name0);
						author.setLastName(namePair[namePair.length - 1]);
					}
					author.setAffiliation(tmpValue);
					article.getAuthors().add(author);
					authors.add(author);
				}
			}
			break;
		}
	}

	@Override
	public void characters(char[] ac, int i, int j) throws SAXException {

		tmpValue = new String(ac, i, j);

	}
}
