package org.service;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.crawlers.EFetch;
import org.jaxb.eSearch.Id;
import org.pubMed.utils.PubMedMultiThreadsCall;
import org.pubMed.utils.PubMedSAXHandler;
import org.utils.ESearchResult;
import org.utils.PubMedParameter;
import org.utils.PubmedPackage;
import org.utils.jaxb.Article;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;

public class PubMedService {

	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces({ MediaType.APPLICATION_JSON })
	@Path("pubmed/article")
	public Collection<PubmedPackage> getArticle(
			final PubMedParameter pubMedParam) {
		ESearchResult eSearchResult = new ESearchResult(pubMedParam);
		try {
			List<Id> idList1 = eSearchResult.getIdList();
			if (idList1 != null) {
				if (idList1.size() > 100) {
					org.utils.PubMedMultiThreadsCall mCall = new org.utils.PubMedMultiThreadsCall(
							idList1, pubMedParam.getDatabase());
					List<Future<PubmedPackage>> futures = mCall.getFutures();
					Collection<PubmedPackage> articleList = new ArrayList<PubmedPackage>();
					for (Future<PubmedPackage> future : futures) {
						articleList.add(future.get());
					}
					return articleList;
				} else {
					String idString1 = "db=" + pubMedParam.getDatabase()
							+ "&id=";
					int index1 = 0;
					for (Id id : idList1) {
						if (index1 > 0)
							idString1 += ",";
						idString1 += id.getContent();
						index1++;
					}
					EFetch efetch = new EFetch(idString1, true);

					InputStream inputStream = efetch.getSearchResult();
					if(inputStream!=null){
						PubmedPackage pack=new PubmedPackage();
						pack.setContent(inputStream);
						pack.setType("pubmed");
					Collection<PubmedPackage> collection =new ArrayList<PubmedPackage>();
					 collection.add(pack);
					return collection;}
				}
			} else {
				throw new IllegalArgumentException("No Result");
			}
		} catch (SAXException e) {
			e.printStackTrace();
		}
		return null;
	}
}
