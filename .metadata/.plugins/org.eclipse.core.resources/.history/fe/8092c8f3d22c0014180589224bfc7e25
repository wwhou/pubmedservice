package org.service;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import org.crawlers.EFetch;
import org.jaxb.eSearch.Id;
import org.utils.ESearchResult;
import org.utils.PubMedParameter;
import org.utils.PubmedPackage;

@Path("/search")
public class PubMedService {

	@POST
	@Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.TEXT_XML)
	@Path("zip")
	public InputStream getZip(final PubMedParameter pubMedParam) {
		final PipedOutputStream sink = new PipedOutputStream();
		try {
			PipedInputStream source = new PipedInputStream(sink);
			ESearchResult eSearchResult = new ESearchResult(pubMedParam);
			List<Id> idList1 = eSearchResult.getIdList();
			String idString1 = "db=" + pubMedParam.getDatabase() + "&id=";
			int index1 = 0;
			for (Id id : idList1) {
				if (index1 > 0)
					idString1 += ",";
				idString1 += id.getContent();
				index1++;
			}
			EFetch efetch = new EFetch(idString1, true);

			final InputStream inputStream = efetch.getSearchResult();
			Runnable runnable = new Runnable() {
				public void run() {
					// PrintStream => BufferedOutputStream => ZipOutputStream =>
					// PipedOutputStream
					ZipOutputStream zip = new ZipOutputStream(sink);
					PrintStream writer = new PrintStream(
							new BufferedOutputStream(zip));

					try {
						// break the strings up into multiple files

						int read = 0;
						byte[] bytes = new byte[1024];
						while ((read = inputStream.read(bytes)) != -1) {
							writer.write(read);
						}
						zip.putNextEntry(new ZipEntry("pubmed.xml"));
						writer.flush();
						zip.closeEntry();

					} catch (IOException e) {
					}
					writer.flush();
					writer.close();
				}
			};
			Thread writerThread = new Thread(runnable, "FileGenerator");
			writerThread.start();
			return source;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;

	}

	@GET
	@Consumes(MediaType.APPLICATION_JSON)
	// @Produces("application/zip")
	@Path("stream")
	public Response getStream(final PubMedParameter pubMedParam) {
		ESearchResult eSearchResult = new ESearchResult(pubMedParam);
		List<Id> idList1 = eSearchResult.getIdList();
		String idString1 = "db=" + pubMedParam.getDatabase() + "&id=";
		int index1 = 0;
		for (Id id : idList1) {
			if (index1 > 0)
				idString1 += ",";
			idString1 += id.getContent();
			index1++;
		}
		EFetch efetch = new EFetch(idString1, true);

		InputStream inputStream = efetch.getSearchResult();
		if (inputStream != null) {

			try {
				File tempDir = File.createTempFile("tempDir", "temp");
				if (tempDir.mkdir()) {
					File temp = new File(tempDir.getPath() + "/temp.xml");
					int read = 0;
					byte[] bytes = new byte[1024];
					FileOutputStream outputStream = new FileOutputStream(temp);
					while ((read = inputStream.read(bytes)) != -1) {
						outputStream.write(bytes, 0, read);
					}
					outputStream.close();
					ResponseBuilder res = Response.ok(tempDir,
							"application/zip");
					res.header("Content-Disposition",
							"attachment; filename=pubMed.zip");
					temp.delete();
					tempDir.delete();
					return res.build();
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		return null;
	}

	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces({ MediaType.APPLICATION_JSON })
	@Path("article")
	public Collection<PubmedPackage> getArticle(
			final PubMedParameter pubMedParam) {
		ESearchResult eSearchResult = new ESearchResult(pubMedParam);
		List<Id> idList1 = eSearchResult.getIdList();
		if (idList1 != null) {
			if (idList1.size() > 100) {
				org.utils.PubMedMultiThreadsCall mCall = new org.utils.PubMedMultiThreadsCall(
						idList1, pubMedParam.getDatabase());
				List<Future<PubmedPackage>> futures = mCall.getFutures();
				Collection<PubmedPackage> articleList = new ArrayList<PubmedPackage>();
				for (Future<PubmedPackage> future : futures) {
					try {
						articleList.add(future.get());
					} catch (InterruptedException | ExecutionException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				return articleList;
			} else {
				String idString1 = "db=" + pubMedParam.getDatabase() + "&id=";
				int index1 = 0;
				for (Id id : idList1) {
					if (index1 > 0)
						idString1 += ",";
					idString1 += id.getContent();
					index1++;
				}
				EFetch efetch = new EFetch(idString1, true);

				InputStream inputStream = efetch.getSearchResult();
				if (inputStream != null) {
					PubmedPackage pack = new PubmedPackage();
					pack.setContent(inputStream);
					pack.setType("pubmed");
					Collection<PubmedPackage> collection = new ArrayList<PubmedPackage>();
					collection.add(pack);
					return collection;
				}
			}
		} else {
			throw new IllegalArgumentException("No Result");
		}
		return null;
	}
}
