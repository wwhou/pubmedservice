package org.service;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.http.entity.InputStreamEntity;
import org.crawlers.EFetch;
import org.jaxb.eSearch.Id;
import org.utils.ESearchResult;
import org.utils.PubMedParameter;
import org.utils.PubmedPackage;

@Path("/search")
public class PubmedService {
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("s")
	public Collection<PubmedPackage> getX(final PubMedParameter pubMedParam){
		if (pubMedParam.getRetMax() > 500) {
			throw new WebApplicationException(Response
					.status(Status.BAD_REQUEST)
					.entity("the maximum retival number is 500").build());
		} else {
			ESearchResult eSearchResult = new ESearchResult(pubMedParam);
			List<Id> idList = eSearchResult.getIdList();
			String idString1 = "db=" + pubMedParam.getDatabase()
					+ "&id=";
			int index1 = 0;
			for (Id id : idList) {
				if (index1 > 0)
					idString1 += ",";
				idString1 += id.getContent();
				index1++;
			}
			EFetch efetch = new EFetch(idString1, true);
			final InputStream inputStream=efetch.getSearchResult();
			
			 final PipedOutputStream sink = new PipedOutputStream();
		        PipedInputStream source = new PipedInputStream(sink);
		 
		        //apparently we need to write to the PipedOutputStream in a separate thread
		        Runnable runnable = new Runnable()
		        {
		            public void run()
		            {
		                //PrintStream => BufferedOutputStream => ZipOutputStream => PipedOutputStream
		                ZipOutputStream zip = new ZipOutputStream(sink);
		                PrintStream writer = new PrintStream(new BufferedOutputStream(zip));
		 
		                try
		                {
		                    //break the strings up into multiple files

		        			
		        			BufferedReader br1 = new BufferedReader(new InputStreamReader(
		        					inputStream));
		        			try {
		        				String s1 = "";
		        				zip.putNextEntry(new ZipEntry("file" + ".xml"));
		        				while ((s1 = br1.readLine()) != null) {
		        					writer.println(s1);
		        				}
		        			} catch (IOException e) {
		        				// TODO Auto-generated catch block
		        				e.printStackTrace();
		        			}
		             
		                   
		                        writer.flush();
		                        zip.closeEntry();
		                    
		                }
		                catch (IOException e)
		                {
		                }
		                writer.flush();
		                writer.close();
		            }
		        };
		        Thread writerThread = new Thread(runnable, "FileGenerator");
		        writerThread.start();
		 
		        return source;

		}
	}
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Path("article")
	public List<InputStreamEntity> getentity(final PubMedParameter pubMedParam){
		if (pubMedParam.getRetMax() > 500) {
			throw new WebApplicationException(Response
					.status(Status.BAD_REQUEST)
					.entity("the maximum retival number is 500").build());
		} else {
			ESearchResult eSearchResult = new ESearchResult(pubMedParam);
			List<Id> idList = eSearchResult.getIdList();
			String idString = "db=" + pubMedParam.getDatabase() + "&id=";
			int index = 0;

			for (Id id : idList) {
				if (index > 0)
					idString += ",";
				idString += id.getContent();
				index++;
			}
			EFetch efetch = new EFetch(idString);
			 List<InputStreamEntity> e=new  ArrayList<InputStreamEntity>();
			 e.add(new InputStreamEntity(efetch.getSearchResult()));
			return e ;

		}
	}
}
