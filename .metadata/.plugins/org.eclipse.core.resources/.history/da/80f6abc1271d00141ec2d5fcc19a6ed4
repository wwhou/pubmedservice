package org.lens.crawler;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import org.lens.utils.PatentJSONParser;

public class MultithreadsJSONTextConnection {

	/**
	 * @param args
	 */

	String cmd_base = "http://www.lens.org/textserver/frontpage.json?patent=";
	
	private int threads = 30;
	// private List<String> results = new ArrayList<String>();
	private ArrayList<Future<PatentJSONParser>> results;
	
	

	public MultithreadsJSONTextConnection(List<String> docKeys) {

		int size = docKeys.size();
		if (size < threads) {
			threads = size;
		} else if (size / 10 < 30) {
			threads = size / 10;
		}

			ExecutorService executor = Executors
					.newFixedThreadPool(threads);
			results = new ArrayList<Future<PatentJSONParser>>();
			for (int i = 0; i < docKeys.size(); i++) {
				String docKey=docKeys.get(i);
				String url1 = cmd_base + docKey;
				Future<PatentJSONParser> future = executor.submit(new MyCallable(
						url1, docKey));
				results.add(future);

			}
	}

	public ArrayList<Future<PatentJSONParser>> getXMLList() {
		return results;
	}

	class MyCallable implements Callable<PatentJSONParser> {
		private final String patentURLString;
		private final String claimURLString;
		private String result = "";
		private String dockey;

		MyCallable(String patentURLString, String dockey) {
			this.patentURLString = patentURLString;
			this.dockey=dockey;
		}

		@Override
		public PatentJSONParser call() throws Exception {
			try {
				URL patentURL = new URL(patentURLString);
				URL claimURL = new URL(claimURLString);
				try {
					LensJSONTextConnection lensConnection = new LensJSONTextConnection(dockey);
					InputStream stream1 = patentURL.openStream();

					try {
						InputStream stream2 = claimURL.openStream();
						result = lensConnection.parseToXML(stream1, stream2);
						PatentJSONParser=lensConnection.getPatentJSONParser();
						PatentJSONParser.SetXMLContent(result);
					} catch (IOException e) {
						result = lensConnection.parseToXML(stream1, null);
						PatentJSONParser=lensConnection.getPatentJSONParser();
						PatentJSONParser.SetXMLContent(result);
					}

				} catch (IOException e) {
				}

			} catch (MalformedURLException e) {

			}
			return PatentJSONParser;
		}
	}
}
