package org.lens.crawler;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import util.DocElement;

public class LensJSONTextConnection {

	/*
	 * Build connection to Text server, then download front page of patent.
	 */
	private Patent patent = new Patent();
	private String[] commands;
	private String dockey;
	// static ArrayList<String> allKeys = new ArrayList<String>();
	// private HashSet<String> allKeys = new HashSet<String>();

	// String cmd_base =
	// "http://www.lens.org/textserver/frontpage.json?patent=";
	// String cmd_base1 = "http://www.lens.org/textserver/claims.json?patent=";
	URL my_url;
	URL my_url1;
	String sources;

	InputStream claims;
	InputStream patentContent;

	public LensJSONTextConnection(String dockey) {
		this.dockey = dockey;
	}

	//
	// public LensJSONTextConnection(String dockey) throws PatentException {
	// // this.dockey = dockey;
	// // this.flags = "";
	//
	// this.dockey = dockey;
	// // System.out.println("TextServer: docKey "+dockey);
	// // System.err.println(cmd_base+dockey);
	//
	// // this.commands=new String[] {"/bin/bash", "-c", cmd_base+ dockey};
	// try {
	// my_url = new URL(cmd_base + dockey);
	// my_url1 = new URL(cmd_base1 + dockey);
	// } catch (MalformedURLException e) {
	// // TODO Auto-generated catch block
	// e.printStackTrace();
	// }
	//
	// }

	String strTemp = "";

//	public DocElement getDocElement() {
//		return this.docElement;
//	}

	public String connect(boolean useXML) {
		try {
			InputStream stream1 = my_url.openStream();
			try {
				if (useXML) {
					return parseToXML(stream1, my_url1.openStream());
				} else {
					return parseJSON(stream1, my_url1.openStream());
				}
			} catch (IOException e) {
				if (useXML) {
					return parseToXML(stream1, null);
				} else {
					return parseJSON(stream1, null);
				}
			}
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return null;
		}

	}

	public boolean saveAsJSON(String savedFile, boolean saveAsXML) {
		try {

			BufferedWriter output = new BufferedWriter(
					new FileWriter(savedFile));
			output.write(connect(saveAsXML));
			output.close();
			return true;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}

	private String parseJSON(InputStream instream1, InputStream instream2) {
		JSONObject jsonObject1 = new JSONObject(new JSONTokener(instream1));

		JSONObject combined = new JSONObject();
		JSONObject id = new JSONObject();
		id.append("ID", dockey);
		combined.put("Patent", id);

		JSONObject applicants = new JSONObject();
		JSONObject inventors = new JSONObject();

		if (jsonObject1.has("title")) {
			JSONObject title = jsonObject1.getJSONObject("title");
			JSONObject title1 = new JSONObject();
			title1.put("Title", title.get("text"));
			combined.accumulate("Patent", title1);

		}
		combined.accumulate("Patent", applicants);
		combined.accumulate("Patent", inventors);
		if (jsonObject1.has("applicants")) {
			JSONObject jsonApplicants = jsonObject1.getJSONObject("applicants");
			JSONArray jsonApplicantArray = jsonApplicants.getJSONArray("texts");
			for (int i = 0; i < jsonApplicantArray.length(); i++) {
				JSONObject applicant = new JSONObject();
				applicant.put("Applicant", jsonApplicantArray.getString(i));
				applicants.accumulate("Applicants", applicant);
			}

		}

		if (jsonObject1.has("inventors")) {
			JSONObject jsonInventors = jsonObject1.getJSONObject("inventors");
			JSONArray jsonInventorArray = jsonInventors.getJSONArray("texts");

			for (int i = 0; i < jsonInventorArray.length(); i++) {
				JSONObject inventor = new JSONObject();
				inventor.put("Inventor", jsonInventorArray.getString(i));
				inventors.accumulate("Inventors", inventor);
				// this.patent.addInventor(jsonInventorArray.getString(i).toLowerCase());
			}

		}

		if (instream2 != null) {

			JSONObject jsonObject2 = new JSONObject(new JSONTokener(instream2));
			JSONArray jsonArray = jsonObject2.getJSONArray("elements");
			JSONObject claims = new JSONObject();
			for (int i = 0; i < jsonArray.length(); i++) {
				String claim = jsonArray.getJSONObject(i).get("text")
						.toString();
				JSONObject jsonClaim = new JSONObject();
				jsonClaim.put("Claim", claim);
				claims.accumulate("Claims", jsonClaim);
			}
			combined.accumulate("Patent", claims);
		}
		JSONObject classes = new JSONObject();
		combined.accumulate("Patent", classes);
		if (jsonObject1.has("classifications")) {
			JSONArray classArray = jsonObject1.getJSONArray("classifications");
			for (int i = 0; i < classArray.length(); i++) {
				System.out.println(classArray.getJSONObject(i).get(
						"classificationType"));
			}
		}

		System.out.println(combined.toString());
		return combined.toString();

	}

	public String parseToXML(InputStream instream1, InputStream instream2) {

		DocumentBuilderFactory domFactory = DocumentBuilderFactory
				.newInstance();
		JSONObject jsonObject1 = new JSONObject(new JSONTokener(instream1));
		domFactory.setNamespaceAware(true);
		try {
			DocumentBuilder builder = domFactory.newDocumentBuilder();
			Document outputdocument = builder.newDocument();
			outputdocument.setXmlVersion("1.0");
			Element root = outputdocument.createElement("Patent");
			outputdocument.appendChild(root);
			Element ID = outputdocument.createElement("ID");
			ID.setTextContent(dockey);
			root.appendChild(ID);
			if (jsonObject1.has("title")) {
				Element title = outputdocument.createElement("Title");
				String titleText = jsonObject1.getJSONObject("title")
						.getString("text");
				title.setTextContent(titleText);
				root.appendChild(title);
				patent.setTitle(titleText);
			}
			if (jsonObject1.has("inventors")) {
				Element inventors = outputdocument.createElement("Inventors");
				root.appendChild(inventors);
				JSONObject jsonInventors = jsonObject1
						.getJSONObject("inventors");
				JSONArray jsonInventorArray = jsonInventors
						.getJSONArray("texts");
				List<String> inventorsList = new ArrayList<String>();
				for (int i = 0; i < jsonInventorArray.length(); i++) {
					// JSONObject inventor = new JSONObject();
					Element inventor = outputdocument.createElement("Inventor");
					String inventorText = jsonInventorArray.getString(i);
					inventor.setTextContent(inventorText);
					inventors.appendChild(inventor);
					inventorsList.add(inventorText);
				}
				patent.setInventors(inventorsList);
			}
			if (jsonObject1.has("applicants")) {
				Element applicants = outputdocument.createElement("Applicants");
				root.appendChild(applicants);
				JSONObject jsonApplicants = jsonObject1
						.getJSONObject("applicants");
				JSONArray jsonApplicantArray = jsonApplicants
						.getJSONArray("texts");
				List<String> applicantsList = new ArrayList<String>();
				for (int i = 0; i < jsonApplicantArray.length(); i++) {
					Element applicant = outputdocument
							.createElement("Applicant");
					String applicantText = jsonApplicantArray.getString(i);
					applicant.setTextContent(applicantText);
					applicants.appendChild(applicant);
					applicantsList.add(applicantText);
				}
				patent.setApplicants(applicantsList);
			}
			if (jsonObject1.has("abstract")) {
				Element abstractElement = outputdocument
						.createElement("Abstract");
				String abstractText = jsonObject1.getJSONObject("abstract")
						.getString("text");
				abstractElement.setTextContent(abstractText);
				root.appendChild(abstractElement);
				patent.setAbstracts(abstractText);
			}
			if (instream2 != null) {
				Element claims = outputdocument.createElement("Claims");
				root.appendChild(claims);
				JSONObject jsonObject2 = new JSONObject(new JSONTokener(
						instream2));
				JSONArray jsonArray = jsonObject2.getJSONArray("elements");
				String ab = "";
				for (int i = 0; i < jsonArray.length(); i++) {
					Element claim = outputdocument.createElement("Claim");
					String claimText = jsonArray.getJSONObject(i).get("text")
							.toString();
					claim.setAttribute("ClaimID", "" + (i + 1));
					claim.setTextContent(claimText);
					claims.appendChild(claim);
					ab += claimText;
				}
				patent.setClaim(ab);
				if (!ab.equals("")) {
					docElement.setId(dockey);
					docElement.setContent(ab);
					docElement.setType("Patent");
				}
			}
			if (jsonObject1.has("classifications")) {
				Element classifications = outputdocument
						.createElement("Classifications");
				root.appendChild(classifications);
				JSONArray classArray = jsonObject1
						.getJSONArray("classifications");
				Map<String, String> classMap = new HashMap<String, String>();
				for (int i = 0; i < classArray.length(); i++) {
					Element classification = outputdocument
							.createElement("Classification");
					JSONObject object = classArray.getJSONObject(i);
					String classType = object.getString("classificationType");
					classification.setAttribute("Type", classType);
					JSONArray classCodes = object
							.getJSONArray("classificationCodes");
					String codes = classCodes.toString();
					classification.setTextContent(codes);
					codes = codes.substring(1, codes.length() - 1);

					classMap.put(classType, codes);
					classifications.appendChild(classification);
				}
				patent.setClassification(classMap);
			}

			if (jsonObject1.has("publicationDate")) {
				Element publicationDate = outputdocument
						.createElement("PublicationDate");
				String date = jsonObject1.getString("publicationDate");
				publicationDate.setTextContent(date);
				root.appendChild(publicationDate);
				patent.setPublicationDate(date);
			}
			if (jsonObject1.has("applicationNumber")) {
				Element applicationNumber = outputdocument
						.createElement("ApplicationNumber");
				String applicationNumberText = jsonObject1
						.getString("applicationNumber");
				applicationNumber.setTextContent(applicationNumberText);
				root.appendChild(applicationNumber);
				patent.setApplicationNumber(applicationNumberText);
			}
			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans;
			try {
				trans = transfac.newTransformer();

				trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
				trans.setOutputProperty(OutputKeys.INDENT, "yes");
				trans.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
				trans.setOutputProperty(
						"{http://xml.apache.org/xslt}indent-amount", "4");
				// create string from xml tree
				StringWriter sw = new StringWriter();
				StreamResult result = new StreamResult(sw);
				DOMSource source = new DOMSource(outputdocument);
				try {
					trans.transform(source, result);
					return sw.toString();
				} catch (TransformerException e) {
					// TODO Auto-generated catch block

					e.printStackTrace();
					return "error";
				}

			} catch (TransformerConfigurationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return "error";
			}

		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return "error";
		}

	}

	public Patent getPatent() {

		return patent;
	}

}
