package org.lens.utils;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.json.Json;
import javax.json.stream.JsonParser;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.utils.jaxb.Article;
import org.utils.jaxb.ArticleId;
import org.utils.jaxb.ArticleIdList;
import org.utils.jaxb.ArticleMeta;
import org.utils.jaxb.Date;
import org.utils.jaxb.Keyword;
import org.utils.jaxb.KeywordList;
import org.utils.jaxb.Person;

public class PatentJSONParser {

	private InputStream inputStream;
	private String dockey;
	private Article article;
	private ArticleMeta articleMeta;
	private List<Person> inventors;

	public PatentJSONParser(InputStream inputStream, String dockey) {
		this.inputStream = inputStream;
		this.dockey = dockey;
		article = new Article();
		articleMeta = new ArticleMeta();
		inventors = new ArrayList<Person>();
	}

	public ArticleMeta getArticleMeta() {
		if (articleMeta != null)
			return articleMeta;
		return null;
	}

	public List<Person> getInventors() {
		if (inventors.size() > 0) {
			return inventors;
		}
		return null;
	}

	public Article getArticle() {
		if (article != null)
			return article;
		return null;
	}

	public void parse() {

		JSONObject jsonObject1 = new JSONObject(new JSONTokener(inputStream));

		ArticleIdList articleIdList = new ArticleIdList();
		ArticleId articleId = new ArticleId();
		articleId.setIdType("patent");
		articleId.setContent(dockey);
		articleIdList.getArticleId().add(articleId);

		articleId.setContent(dockey);
		if (jsonObject1.has("title")) {
			articleMeta.setTitle(jsonObject1.getJSONObject("title").getString(
					"text"));
		}
		if (jsonObject1.has("applicants")) {

			JSONObject jsonApplicants = jsonObject1.getJSONObject("applicants");
			JSONArray jsonApplicantArray = jsonApplicants.getJSONArray("texts");
			List<String> applicantsList = new ArrayList<String>();
			for (int i = 0; i < jsonApplicantArray.length(); i++) {

				String applicantText = jsonApplicantArray.getString(i);
				applicantsList.add(applicantText);
			}
		}
		if (jsonObject1.has("inventors")) {
			JSONObject jsonInventors = jsonObject1.getJSONObject("inventors");
			JSONArray jsonInventorArray = jsonInventors.getJSONArray("texts");
			for (int i = 0; i < jsonInventorArray.length(); i++) {
				Person person = new Person();
				String inventorText = jsonInventorArray.getString(i);
				String[] names = inventorText.split(" ");
				if (names.length == 3) {
					person.setFirstName(names[1]);
					person.setMiddleName(names[2]);
					person.setLastName(names[0]);
				} else if (names.length == 2) {
					person.setFirstName(names[1]);
					person.setLastName(names[0]);
				}
				person.setFullName(inventorText);
				person.setType("inventor");
				inventors.add(person);
				article.getPeople().add(person);
			}
		}

		if (jsonObject1.has("abstract")) {

			String abstractText = jsonObject1.getJSONObject("abstract")
					.getString("text");

			articleMeta.setArticleAbstract(abstractText);
		}
		if (jsonObject1.has("publicationNumber")) {
			articleId = new ArticleId();
			articleId.setContent(jsonObject1.getJSONObject("publicationNumber")
					.toString());
			articleIdList.getArticleId().add(articleId);
		}
		//
		if (jsonObject1.has("classifications")) {
			KeywordList keywordList = new KeywordList();
			JSONArray classArray = jsonObject1.getJSONArray("classifications");
			for (int i = 0; i < classArray.length(); i++) {
				JSONObject object = classArray.getJSONObject(i);
				String classType = object.getString("classificationType");

				JSONArray classCodes = object
						.getJSONArray("classificationCodes");

				for (int index = 0; index < classCodes.length(); index++) {
					String code = classCodes.get(index).toString();
					if (!classType.equals("DOCUS")) {
						if (classType.equals("IPC"))
							classType = IpcCodeParser.parseCode(classType);
						else if (classType.equals("US"))
							classType = "USPC";

						Classification classi = new Classification(classType,
								code);
						Keyword keyword = new Keyword();
						if (classi.translateCodeToText() != null) {
							keyword.setContent(classi.translateCodeToText());
							keywordList.getKeyword().add(keyword);
						}
					}

					articleMeta.setKeywords(keywordList);
				}

			}

		}

		if (jsonObject1.has("publicationDate")) {
			// 2010-10-14
			String date = jsonObject1.getString("publicationDate");
			String[] dates = date.split("-");

			Date da = new Date();
			if (dates.length == 3){
				da.setDay(Integer.parseInt(dates[2]));			
				da.setMonth(Integer.parseInt(dates[1]));
				da.setYear(Integer.parseInt(dates[0]));
				}
			if (dates.length == 2)
				da.setMonth(Integer.parseInt(dates[1]));
			if (dates.length == 1)
				da.setYear(Integer.parseInt(dates[0]));
			articleMeta.setPubDate(da);
		}
		article.setArticleMeta(articleMeta);
		if (articleIdList.getArticleId().size() > 0)
			articleMeta.setArticleIdList(articleIdList);
		// if (jsonObject1.has("applicationNumber")) {
		// Element applicationNumber = outputdocument
		// .createElement("ApplicationNumber");
		// String applicationNumberText = jsonObject1
		// .getString("applicationNumber");
		// applicationNumber.setTextContent(applicationNumberText);
		// root.appendChild(applicationNumber);
		// patent.setApplicationNumber(applicationNumberText);
		// }
	}

	public void parseJSON() {
		JsonParser jsonParser = Json.createParser(inputStream);
		while (jsonParser.hasNext()) {

			JsonParser.Event event = jsonParser.next();
			switch (event) {
			case START_ARRAY:
			case END_ARRAY:
			case START_OBJECT:
			case END_OBJECT:
			case VALUE_FALSE:
			case VALUE_NULL:
			case VALUE_TRUE:
				System.out.println(event.toString());
				break;
			case KEY_NAME:
				System.out.print(event.toString() + " "
						+ jsonParser.getString() + " - ");
				break;
			case VALUE_STRING:
			case VALUE_NUMBER:
				System.out.println(event.toString() + " "
						+ jsonParser.getString());
				break;
			}

		}

	}
}
