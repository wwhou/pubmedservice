package org.lens.utils;

import java.io.InputStream;

import javax.json.Json;
import javax.json.stream.JsonParser;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;

public class PatentJSONParser {

	private InputStream inputStream;
	private String dockey;
	public PatentJSONParser(InputStream inputStream) {
		this.inputStream = inputStream;
	}
	public PatentJSONParser(InputStream inputStream, String dockey) {
		this.inputStream = inputStream;
		this.dockey=dockey;
	}

	private String parseJSON(InputStream instream1, InputStream instream2) {
		JSONObject jsonObject1 = new JSONObject(new JSONTokener(instream1));

		JSONObject combined = new JSONObject();
		JSONObject id = new JSONObject();
		id.append("ID", dockey);
		combined.put("Patent", id);

		JSONObject applicants = new JSONObject();
		JSONObject inventors = new JSONObject();

		if (jsonObject1.has("title")) {
			JSONObject title = jsonObject1.getJSONObject("title");
			JSONObject title1 = new JSONObject();
			title1.put("Title", title.get("text"));
			combined.accumulate("Patent", title1);

		}
		combined.accumulate("Patent", applicants);
		combined.accumulate("Patent", inventors);
		if (jsonObject1.has("applicants")) {
			JSONObject jsonApplicants = jsonObject1.getJSONObject("applicants");
			JSONArray jsonApplicantArray = jsonApplicants.getJSONArray("texts");
			for (int i = 0; i < jsonApplicantArray.length(); i++) {
				JSONObject applicant = new JSONObject();
				applicant.put("Applicant", jsonApplicantArray.getString(i));
				applicants.accumulate("Applicants", applicant);
			}

		}

		if (jsonObject1.has("inventors")) {
			JSONObject jsonInventors = jsonObject1.getJSONObject("inventors");
			JSONArray jsonInventorArray = jsonInventors.getJSONArray("texts");

			for (int i = 0; i < jsonInventorArray.length(); i++) {
				JSONObject inventor = new JSONObject();
				inventor.put("Inventor", jsonInventorArray.getString(i));
				inventors.accumulate("Inventors", inventor);
				// this.patent.addInventor(jsonInventorArray.getString(i).toLowerCase());
			}

		}

		if (instream2 != null) {

			JSONObject jsonObject2 = new JSONObject(new JSONTokener(instream2));
			JSONArray jsonArray = jsonObject2.getJSONArray("elements");
			JSONObject claims = new JSONObject();
			for (int i = 0; i < jsonArray.length(); i++) {
				String claim = jsonArray.getJSONObject(i).get("text")
						.toString();
				JSONObject jsonClaim = new JSONObject();
				jsonClaim.put("Claim", claim);
				claims.accumulate("Claims", jsonClaim);
			}
			combined.accumulate("Patent", claims);
		}
		JSONObject classes = new JSONObject();
		combined.accumulate("Patent", classes);
		if (jsonObject1.has("classifications")) {
			JSONArray classArray = jsonObject1.getJSONArray("classifications");
			for (int i = 0; i < classArray.length(); i++) {
				System.out.println(classArray.getJSONObject(i).get(
						"classificationType"));
			}
		}

		System.out.println(combined.toString());
		return combined.toString();

	}

	public void parseJSON(){
		JsonParser jsonParser=Json.createParser(inputStream);
		while(jsonParser.hasNext()){

			   JsonParser.Event event = jsonParser.next();
			   switch(event) {
			      case START_ARRAY:
			      case END_ARRAY:
			      case START_OBJECT:
			      case END_OBJECT:
			      case VALUE_FALSE:
			      case VALUE_NULL:
			      case VALUE_TRUE:
			         System.out.println(event.toString());
			         break;
			      case KEY_NAME:
			         System.out.print(event.toString() + " " +
			                          jsonParser.getString() + " - ");
			         break;
			      case VALUE_STRING:
			      case VALUE_NUMBER:
			         System.out.println(event.toString() + " " +
			                            jsonParser.getString());
			         break;
			   }
			   
		}
		
	}
}
